declare name "Faust Tables Library";
declare author "Romain Michon";
declare version "1.0";

import("math.lib");

saturation(x) = x<: (_>1),(_<=1 : _*x) :> _+_;
saturation2(x) = x<: (_<-1),(_>=-1 : _*x) :> _*-1+_;

//*********************************************************************************
// BOW TABLE
//*********************************************************************************

bow(offset,slope) = pow(abs(sample) + 0.75, -4) : saturation
	with{
	sample(y) = (y + offset)*slope;
	};

//*********************************************************************************
// REED TABLE
//*********************************************************************************
	
reed(offset,slope) = reedTable(_) : saturation : saturation2
	with{
	reedTable = offset + (slope*_);
	};
	
//*********************************************************************************
// ONE ZERO FILTER
//*********************************************************************************

oneZero(x) = (_*0.5 + x*0.5)~_;

//*********************************************************************************
// BANDPASS FILTER WITH CONSTANT UNITY PEAK GAIN BASED ON A BIQUAD
//*********************************************************************************

bandPass(resonance,radius) = TF2(b0,b1,b2,a1,a2)
	with{
		a2 = radius*radius;
		a1 = -2*radius*cos(PI*2*resonance/SR);
		b0 = 0.5-0.5*a2;
		b1 = 0;
		b2 = -b0;
	};

//*********************************************************************************
// BANDPASS FILTER BASED ON A BIQUAD
//*********************************************************************************

bandPassH(resonance,radius) = TF2(b0,b1,b2,a1,a2)
	with{
		a2 = radius*radius;
		a1 = -2*radius*cos(PI*2*resonance/SR);
		b0 = 1;
		b1 = 0;
		b2 = 0;
	};
	
//*********************************************************************************
// FLUE JET NON-LINEAR FUNCTION
//*********************************************************************************
	
jetTable(x) = x <: _*(_*_-1) : saturation1 : saturation2
	with{
		saturation1(x) = x<: (_>1),(_<=1 : _*x) :> _+_;
		saturation2(x) = x<: (_<-1),(_>=-1 : _*x) :> _*-1+_;
	};
	
//*********************************************************************************
// WAVE TABLE FOR MODAL BAR INSTRUMENTS
//*********************************************************************************

marmstk1Wave(stickHardness) = rdtable(marmstk1TableSize,marmstk1,int(dataRate(rate)*gateSignal))
	with{
		readMarmstk1 = ffunction(float readMarmstk1 (int), <readTable.h>,"");
		marmstk1TableSize = 246;
		marmstk1 = time%marmstk1TableSize : int : readMarmstk1;
		rate = 0.25*pow(4,stickHardness);
		dataRate(readRate) = readRate : (+ : decimal) ~ _ : *(float(marmstk1TableSize));
	};



